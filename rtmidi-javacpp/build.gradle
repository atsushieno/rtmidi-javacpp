plugins {
    id 'java-library'
    id 'org.bytedeco.gradle-javacpp-build'
    id 'maven-publish'
    id 'signing'
}

group = 'dev.atsushieno'
version = '0.1.0'

repositories {
    mavenLocal()
    mavenCentral()
}

ext.targetArtifactName = "dev.atsushieno:rtmidi-javacpp"

configurations {
    baseline
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

dependencies {
    api "org.bytedeco:javacpp:1.5.8"
    javacppPlatform "org.bytedeco:javacpp-platform:1.5.8"
    javacppPlatform "$targetArtifactName:$version:linux-x86"
    javacppPlatform "$targetArtifactName:$version:linux-x86_64"
    javacppPlatform "$targetArtifactName:$version:macosx-x86_64"
    javacppPlatform "$targetArtifactName:$version:macosx-arm64"
    javacppPlatform "$targetArtifactName:$version:windows-x86"
    javacppPlatform "$targetArtifactName:$version:windows-x86_64"
    testRuntimeOnly "org.bytedeco:javacpp:1.5.8:$javacppPlatform"
    testImplementation platform('org.junit:junit-bom:5.9.1')
    //testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

tasks.withType(org.bytedeco.gradle.javacpp.BuildTask).configureEach {
    includePath = ["$buildDir/$javacppPlatform/include"]
    linkPath = ["$buildDir/$javacppPlatform/lib"]
}

javacppBuildCommand {
    buildCommand = ['bash', 'build.sh']
}

javacppBuildParser {
    classOrPackageNames = ['dev.atsushieno.rtmidi_javacpp.presets.*']
    outputDirectory = file("$buildDir/generated/sources/javacpp/")
}

javacppBuildCompiler {
    copyLibs = true
}

jar {
    manifest {
        attributes 'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                'Implementation-Title': 'RtMidi JavaCPP binding',
                'Implementation-Vendor': 'atsushieno',
                'Implementation-Version': project.version,
                'Specification-Title': 'RtMidi JavaCPP binding',
                'Specification-Vendor': 'atsushieno',
                'Specification-Version': project.version
    }
}

javadoc {
    failOnError = false
    //from javadoc.destinationDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

/*
// check API breakage
tasks.register("japicmp", me.champeau.gradle.japicmp.JapicmpTask) {
    oldArchives.from(configurations.baseline)
    newArchives.from(files(jar.archivePath))
    onlyModified = true
    failOnModification = true
    txtOutputFile = file("$buildDir/reports/japi.txt")
    ignoreMissingClasses = true
    includeSynthetic = true
}

check.dependsOn(japicmp)
*/

// publisher settings
publishing {
    publications.all {
        from components.java

        pom {
            name.set('rtmidi-jna')
            description.set('rtmidi JNA binding with prebuilt binaries')
            url.set('https://github.com/atsushieno/rtmidi-jna')
            scm {
                url.set('https://github.com/atsushieno/rtmidi-jna')
            }
            licenses {
                license {
                    name.set('the MIT License')
                    url.set('https://github.com/atsushieno/rtmidi-jna/blob/main/LICENSE')
                }
            }
            developers {
                developer {
                    id.set('atsushieno')
                    name.set('Atsushi Eno')
                    email.set('atsushieno@gmail.com')
                }
            }
        }
    }
}

// keep it as is. It is replaced by CI release builds
signing {}

apply from: "${rootDir}/publish-module.gradle"
