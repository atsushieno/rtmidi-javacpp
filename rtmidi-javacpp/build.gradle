plugins {
    id 'java-library'
    id 'org.bytedeco.gradle-javacpp-build'
    id 'maven-publish'
    id 'signing'
}

group = 'dev.atsushieno'
version = '0.1.0'

repositories {
    mavenLocal()
    mavenCentral()
}

ext.targetArtifactName = "dev.atsushieno:rtmidi-javacpp"

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    api "org.bytedeco:javacpp:1.5.8"
    javacppPlatform "org.bytedeco:javacpp-platform:1.5.8"
    javacppPlatform "$targetArtifactName:$version:linux-x86"
    javacppPlatform "$targetArtifactName:$version:linux-x86_64"
    javacppPlatform "$targetArtifactName:$version:macosx-x86_64"
    javacppPlatform "$targetArtifactName:$version:macosx-arm64"
    javacppPlatform "$targetArtifactName:$version:windows-x86"
    javacppPlatform "$targetArtifactName:$version:windows-x86_64"
    testRuntimeOnly "org.bytedeco:javacpp:1.5.8:$javacppPlatform"
}

test {
    useJUnitPlatform()
}

tasks.withType(org.bytedeco.gradle.javacpp.BuildTask).configureEach {
    includePath = ["$buildDir/$javacppPlatform/include"]
    linkPath = ["$buildDir/$javacppPlatform/lib"]
}

javacppBuildCommand {
    buildCommand = ['bash', 'build.sh']
}

javacppBuildParser {
    classOrPackageNames = ['dev.atsushieno.rtmidi_javacpp.presets.*']
    outputDirectory = file("$buildDir/generated/sources/javacpp/")
}

javacppBuildCompiler {
    copyLibs = true
}

jar {
    manifest {
        attributes 'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                'Implementation-Title': 'RtMidi JavaCPP binding',
                'Implementation-Vendor': 'atsushieno',
                'Implementation-Version': project.version,
                'Specification-Title': 'RtMidi JavaCPP binding',
                'Specification-Vendor': 'atsushieno',
                'Specification-Version': project.version
    }
}

javadoc {
    failOnError = false
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
